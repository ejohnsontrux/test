# name: GitHub Actions Demo
# run-name: ${{ github.actor }} is testing out GitHub Actions üöÄ
# on: [push]
# jobs:
#   Explore-GitHub-Actions:
#     runs-on: ubuntu-latest
#     steps:
#       - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
#       - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
#       - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
#       - name: Check out repository code
#         uses: actions/checkout@v3
#       - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
#       - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
#       - name: List files in the repository
#         run: |
#           ls ${{ github.workspace }}
#       - run: echo "üçè This job's status is ${{ job.status }}."

#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           # AWS Region, e.g. us-east-2
#           aws-region: us-west-1
#           # # The Amazon Resource Name (ARN) of the role to assume. Use the provided credentials to assume an IAM role and configure the Actions environment with the assumed role credentials rather than with the provided credentials.
#           # role-to-assume: # optional
#           # # AWS Access Key ID. Provide this key if you want to assume a role using access keys rather than a web identity token.
#           # aws-access-key-id: # optional
#           # # AWS Secret Access Key. Required if aws-access-key-id is provided.
#           # aws-secret-access-key: # optional
#           # # AWS Session Token.
#           # aws-session-token: # optional
#           # # Role session name (default: GitHubActions)
#           # role-session-name: # optional

        
#       - name: install npm
#         run: 'sudo apt update -y && sudo apt install nodejs npm -y'

#       - name: Install AWS CDK
#         run: 'sudo npm install -g aws-cdk'

#       - name: CDK Deploy
#         run: cdk deploy
#         working-directory: CDK-AWS
